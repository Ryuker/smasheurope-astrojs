---
import { Icon } from 'astro-icon/components';
const {
  icon, 
  text, 
  url,
  tooltipText = '',
  classes = " ",
  colors = 'bg-se-blue-100 hover:bg-se-blue-200', 
  newTab = false
} = Astro.props;

---

<a target={newTab} href={url} class={`${classes} ${colors} px-4 md:px-6 py-3 min-w-20 rounded-lg flex justify-center items-center`} id="button" aria-describedby="tooltip">
  {icon && <Icon name={icon} class="text-lg" />}
  {text && text}
</a>

{ tooltipText && 
  <div id="tooltip" role="tooltip">
    {tooltipText}
    <div id="arrow"></div>
  </div>
}

<style is:global>
  #tooltip {
    display: none;
    width: max-content;
    position: absolute;
    top: 0;
    left: 0;
    background: #222;
    color: white;
    font-weight: bold;
    padding: 5px;
    border-radius: 4px;
    font-size: 90%;
  }

  #arrow {
    position: absolute;
    background: #222;
    width: 8px;
    height: 8px;
    transform: rotate(45deg);
  }
</style>

<script>
  import { computePosition, flip, shift, offset, arrow } from '@floating-ui/dom';
 
  const button = document.querySelector('#button');
  const tooltip = document.querySelector('#tooltip');
  const arrowElement = document.querySelector('#arrow');

  function update() {
    if (tooltip && button && arrowElement) {
      computePosition(button, tooltip, {
        placement: 'bottom',
        middleware: [ 
          offset(8), 
          flip(), 
          shift({padding: 5}),
          arrow({element: arrowElement})
        ],
      }).then(({x, y, placement, middlewareData}) => {
        Object.assign(tooltip.style, {
          left: `${x}px`,
          top: `${y}px`,
        });
        
        // Accessing the data
        const { x: arrowX, y: arrowY} = middlewareData.arrow;

        const staticSide = {
          top: 'bottom',
          right: 'left',
          bottom: 'top',
          left: 'right',
        }[placement.split('-')[0]];
      
        Object.assign(arrowElement.style, {
          left: arrowX != null ? `${arrowX}px` : '',
          top: arrowY != null ? `${arrowY}px` : '',
          right: '',
          bottom: '',
          [staticSide]: '-4px',
        });
      });
    }
  }

  function showTooltip() {
    tooltip.style.display = 'block';
    update();
  }

  function hideTooltip() {
    tooltip.style.display = '';
  }

  [
    ['mouseenter', showTooltip],
    ['mouseleave', hideTooltip],
    ['focus', showTooltip],
    ['blur', hideTooltip],
  ].forEach(([event, listener]) => {
    button.addEventListener(event, listener);
  });
</script>