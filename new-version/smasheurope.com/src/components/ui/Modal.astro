---
import { Icon } from 'astro-icon/components';
const {
  openText,
  title,
  icon, 
  btnClasses = " ",
  dialogClasses = " ",
  colors = 'bg-se-blue-100 hover:bg-se-blue-200', 
} = Astro.props;
---
<astro-modal>
  <button class={`${btnClasses} ${colors} w-full md:w-inherit px-4 md:px-6 py-3 min-w-20 rounded-lg flex justify-center items-center`}>
    {icon && <Icon name={icon} class="text-lg" /> }
    {openText && openText}
  </button>
  
  <dialog class={`${dialogClasses + " "}rounded-lg p-0`}>
    <div class="flex flex-col h-full">
      <div class="flex border-b py-4 pl-5 pr-0 justify-between">
        <div class="flex items-center text-sm font-semibold">{title}</div>
        <form method="dialog">
          <button class="px-3 font-bold text-se-muted hover:text-se-blue-300 flex items-center">
            <Icon name="close" class="text-3xl" />
          </button>
        </form>
      </div>
      <div class="flex basis-full justify-center">
        <slot name="main" />
      </div>
    </div>
  </dialog>
</astro-modal>


<script>
  class Modal extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector('button');
      const dialog = this.querySelector('dialog');
      
      if (dialog) {
        dialog.addEventListener('click', event => {
          if (event.target === dialog) {
            dialog.close();
          }
        });

        dialog.addEventListener('close', () => {
          document.body.classList.remove('lock-scroll');
          
          // stop trailers from playing
          const memory = dialog.innerHTML;
          dialog.innerHTML = memory;
        });
      }
      
      if (button) {
        button?.addEventListener('click', () => {
          if (dialog) {
            dialog.showModal();
            document.body.classList.add('lock-scroll');
          }
        });
      }
    }
  }

  customElements.define('astro-modal', Modal);
</script>

<style is:global>

  astro-modal dialog {
    /* transition: fade-out 1s allow-discrete, slide-out 1s allow-discrete; */
    opacity: 0;
    transform: translate(0, -150px);

    transition: 
      display 2s allow-discrete, overlay 2s allow-discrete, 
      opacity 1s allow-discrete, transform 1s allow-discrete;
      
    animation: fade-out 0.5s forwards, slide-out 0.5s forwards;
  
    &[open] {
      animation: fade-in 0.5s forwards, slide-in 0.5s forwards 0.5s;
    }
  }

  @keyframes slide-in {
    from {
      transform: translate(0, -150px);
    }
    to {
      transform: translate(0, 0);
    }
  }

  @keyframes slide-out {
    from {
      transform: translate(0, 0);
    }
    to {
      transform: translate(0, -150px);
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  /* astro-modal dialog::backdrop {
    background: rgba(81, 66, 66, 0.5);
    transition: opacity 1s;
    
    animation: fade-out 0.5s forwards;
  }

  astro-modal dialog[open]::backdrop {
    animation: fade-in 0.5s forwards;
  }

  

  /* astro-modal dialog[open]::backdrop {
    transition:
      display 1s allow-discrete,
      overlay 1s allow-discrete;
      animation: open 1s forwards;
      /* background: rgba(81, 66, 66, 0.5); */
  /* } */ 

  /* @keyframes open {
    from { opacity: 0 }
    to   { opacity: 1 }
  } */


  /* astro-modal dialog.closed::backdrop {
    animation: backdrop-fade 3s ease backwards;
    animation-direction: reverse;
  }  */

  .lock-scroll {
    overflow: hidden;
  }

  /* iframe{bottom:0;border-radius:0 0 .375rem .375rem;height:100%;left:0;position:absolute;right:0;top:0;width:100%} */

  .video {
    width:100%;
    padding-top:56.25%; 
    position:relative;
  }

  .video iframe {
    bottom:0;border-radius:0 0 .375rem .375rem;height:100%;left:0;position:absolute;right:0;top:0;width:100%
  }

</style>